name: CI/CD Workflow for NodeJS MongoDB App

on: # Define the events to trigger the workflow
  push:
    branches:
      - main # Trigger the workflow on pushes to the 'main' branch
  pull_request: # Optional: Trigger on PRs
    branches:
      - main # Trigger the workflow on PRs to the 'main' branch

env: # Environment variables accessible across all jobs
  MONGO_URI: ${{ secrets.MONGO_URI }} # Securely store sensitive information in GitHub Secrets

jobs:
  # Job 1: Checkout the code
  git-checkout:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

  # Job 2: Docker Login, Build, and Push
  docker-build-push:
    runs-on: ubuntu-latest
    needs: git-checkout # Run only after the 'git-checkout' job
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/loginprofile:v2 .
          docker push ${{ secrets.DOCKER_USERNAME }}/loginprofile:v2
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }} # Inject MONGO_URI during build

  # Job 3: Running test cases
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
        continue-on-error: true # This will allow the workflow to continue even if tests fail

  # Job 4: Running test cases across different Node versions (Matrix Build)
  run-tests-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14, 16, 18]
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
        continue-on-error: true # This will allow the workflow to continue even if tests fail

  # Job 5: Provision GKE cluster with Terraform
  terraform-provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6 # Specify your Terraform version

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform Configuration
        run: terraform validate

      - name: Plan Infrastructure Changes
        run: terraform plan -out=tfplan

      - name: Apply Infrastructure Changes
        run: terraform apply -auto-approve tfplan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}

  # Job 6: Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: terraform-provision # Run only after the Terraform job
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: loginprofile-cluster # GKE cluster name
          location: us-central1-a # GKE cluster location
          project_id: loginprofile123 # Project ID

      - name: Deploy to GKE
        run: |
          kubectl apply -f Deployment.yml
